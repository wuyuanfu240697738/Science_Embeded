


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                                uC/CPU
    3 00000000         ;                                    CPU CONFIGURATION &
                        PORT LAYER
    4 00000000         ;
    5 00000000         ;                         (c) Copyright 2004-2018; Silic
                       on Laboratories Inc.,
    6 00000000         ;                                400 W. Cesar Chavez, Au
                       stin, TX 78701
    7 00000000         ;
    8 00000000         ;                   All rights reserved. Protected by in
                       ternational copyright laws.
    9 00000000         ;
   10 00000000         ;                  Your use of this software is subject 
                       to your acceptance of the terms
   11 00000000         ;                  of a Silicon Labs Micrium software li
                       cense, which can be obtained by
   12 00000000         ;                  contacting info@micrium.com. If you d
                       o not agree to the terms of this
   13 00000000         ;                  license, you may not use this softwar
                       e.
   14 00000000         ;
   15 00000000         ;                  Please help us continue to provide th
                       e Embedded community with the finest
   16 00000000         ;                  software available. Your honesty is g
                       reatly appreciated.
   17 00000000         ;
   18 00000000         ;                    You can find our product's document
                       ation at: doc.micrium.com
   19 00000000         ;
   20 00000000         ;                          For more information visit us
                        at: www.micrium.com
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         ;                                            CPU PORT FI
                       LE
   26 00000000         ;
   27 00000000         ;                                               ARMv7-M
   28 00000000         ;                                           ARM C Compil
                       er
   29 00000000         ;
   30 00000000         ; Filename : cpu_a.asm
   31 00000000         ; Version  : V1.31.04
   32 00000000         ;*******************************************************
                       *************************************************
   33 00000000         ; Note(s)  : This port supports the ARM Cortex-M3, Corte
                       x-M4 and Cortex-M7 architectures.
   34 00000000         ;*******************************************************
                       *************************************************
   35 00000000         
   36 00000000         
   37 00000000         ;*******************************************************
                       *************************************************
   38 00000000         ;                                           PUBLIC FUNCT



ARM Macro Assembler    Page 2 


                       IONS
   39 00000000         ;*******************************************************
                       *************************************************
   40 00000000         
   41 00000000                 EXPORT           CPU_IntDis
   42 00000000                 EXPORT           CPU_IntEn
   43 00000000         
   44 00000000                 EXPORT           CPU_SR_Save
   45 00000000                 EXPORT           CPU_SR_Restore
   46 00000000         
   47 00000000                 EXPORT           CPU_WaitForInt
   48 00000000                 EXPORT           CPU_WaitForExcept
   49 00000000         
   50 00000000         
   51 00000000                 EXPORT           CPU_CntLeadZeros
   52 00000000                 EXPORT           CPU_CntTrailZeros
   53 00000000                 EXPORT           CPU_RevBits
   54 00000000         
   55 00000000         
   56 00000000         ;*******************************************************
                       *************************************************
   57 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   58 00000000         ;*******************************************************
                       *************************************************
   59 00000000         
   60 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   61 00000000                 THUMB
   62 00000000                 REQUIRE8
   63 00000000                 PRESERVE8
   64 00000000         
   65 00000000         ;*******************************************************
                       *************************************************
   66 00000000         ;                                    DISABLE and ENABLE 
                       INTERRUPTS
   67 00000000         ;
   68 00000000         ; Description : Disable/Enable interrupts.
   69 00000000         ;
   70 00000000         ; Prototypes  : void  CPU_IntDis(void);
   71 00000000         ;               void  CPU_IntEn (void);
   72 00000000         ;*******************************************************
                       *************************************************
   73 00000000         
   74 00000000         CPU_IntDis
   75 00000000 B672            CPSID            I
   76 00000002 4770            BX               LR
   77 00000004         
   78 00000004         
   79 00000004         CPU_IntEn
   80 00000004 B662            CPSIE            I
   81 00000006 4770            BX               LR
   82 00000008         
   83 00000008         
   84 00000008         ;*******************************************************
                       *************************************************
   85 00000008         ;                                      CRITICAL SECTION 
                       FUNCTIONS
   86 00000008         ;



ARM Macro Assembler    Page 3 


   87 00000008         ; Description : Disable/Enable Kernel aware interrupts b
                       y preserving the state of BASEPRI.  Generally speaking,
   88 00000008         ;               the state of the BASEPRI interrupt excep
                       tion processing is stored in the local variable
   89 00000008         ;               'cpu_sr' & Kernel Aware interrupts are t
                       hen disabled ('cpu_sr' is allocated in all functions
   90 00000008         ;               that need to disable Kernel aware interr
                       upts). The previous BASEPRI interrupt state is restored
   91 00000008         ;               by copying 'cpu_sr' into the BASEPRI reg
                       ister.
   92 00000008         ;
   93 00000008         ; Prototypes  : CPU_SR  CPU_SR_Save   (CPU_SR  new_basep
                       ri);
   94 00000008         ;               void    CPU_SR_Restore(CPU_SR  cpu_sr);
   95 00000008         ;
   96 00000008         ; Note(s)     : (1) These functions are used in general 
                       like this :
   97 00000008         ;
   98 00000008         ;                       void  Task (void  *p_arg)
   99 00000008         ;                       {
  100 00000008         ;                           CPU_SR_ALLOC();             
                               /* Allocate storage for CPU status register */
  101 00000008         ;                               :
  102 00000008         ;                               :
  103 00000008         ;                           CPU_CRITICAL_ENTER();       
                               /* cpu_sr = CPU_SR_Save();                  */
  104 00000008         ;                               :
  105 00000008         ;                               :
  106 00000008         ;                           CPU_CRITICAL_EXIT();        
                               /* CPU_SR_Restore(cpu_sr);                  */
  107 00000008         ;                               :
  108 00000008         ;                       }
  109 00000008         ;
  110 00000008         ;               (2) Increasing priority using a write to
                        BASEPRI does not take effect immediately.
  111 00000008         ;                   (a) IMPLICATION  This erratum means 
                       that the instruction after an MSR to boost BASEPRI
  112 00000008         ;                       might incorrectly be preempted b
                       y an insufficient high priority exception.
  113 00000008         ;
  114 00000008         ;                   (b) WORKAROUND  The MSR to boost BAS
                       EPRI can be replaced by the following code sequence:
  115 00000008         ;
  116 00000008         ;                       CPSID i
  117 00000008         ;                       MSR to BASEPRI
  118 00000008         ;                       DSB
  119 00000008         ;                       ISB
  120 00000008         ;                       CPSIE i
  121 00000008         ;*******************************************************
                       *************************************************
  122 00000008         
  123 00000008         CPU_SR_Save
  124 00000008         ;        CPSID   I                               ; Corte
                       x-M7 errata notice. See Note #2
  125 00000008         ;        PUSH   {R1}
  126 00000008         ;        MRS     R1, BASEPRI
  127 00000008         ;        MSR     BASEPRI, R0
  128 00000008         ;        DSB
  129 00000008         ;        ISB



ARM Macro Assembler    Page 4 


  130 00000008         ;        MOV     R0, R1
  131 00000008         ;        POP    {R1}
  132 00000008         ;        CPSIE   I
  133 00000008         ;        BX      LR
  134 00000008         
  135 00000008 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  136 0000000C B672            CPSID            I
  137 0000000E 4770            BX               LR
  138 00000010         
  139 00000010         
  140 00000010         CPU_SR_Restore
  141 00000010         ;        CPSID   I                               ; Corte
                       x-M7 errata notice. See Note #2
  142 00000010         ;        MSR     BASEPRI, R0
  143 00000010         ;        DSB
  144 00000010         ;        ISB
  145 00000010         ;        CPSIE   I
  146 00000010         ;        BX      LR
  147 00000010         
  148 00000010 F380 8810       MSR              PRIMASK, R0
  149 00000014 4770            BX               LR
  150 00000016         
  151 00000016         
  152 00000016         ;*******************************************************
                       *************************************************
  153 00000016         ;                                         WAIT FOR INTER
                       RUPT
  154 00000016         ;
  155 00000016         ; Description : Enters sleep state, which will be exited
                        when an interrupt is received.
  156 00000016         ;
  157 00000016         ; Prototypes  : void  CPU_WaitForInt (void)
  158 00000016         ;
  159 00000016         ; Argument(s) : none.
  160 00000016         ;*******************************************************
                       *************************************************
  161 00000016         
  162 00000016         CPU_WaitForInt
  163 00000016 BF30            WFI                          ; Wait for interrup
                                                            t
  164 00000018 4770            BX               LR
  165 0000001A         
  166 0000001A         
  167 0000001A         ;*******************************************************
                       *************************************************
  168 0000001A         ;                                         WAIT FOR EXCEP
                       TION
  169 0000001A         ;
  170 0000001A         ; Description : Enters sleep state, which will be exited
                        when an exception is received.
  171 0000001A         ;
  172 0000001A         ; Prototypes  : void  CPU_WaitForExcept (void)
  173 0000001A         ;
  174 0000001A         ; Argument(s) : none.
  175 0000001A         ;*******************************************************
                       *************************************************
  176 0000001A         



ARM Macro Assembler    Page 5 


  177 0000001A         CPU_WaitForExcept
  178 0000001A BF20            WFE                          ; Wait for exceptio
                                                            n
  179 0000001C 4770            BX               LR
  180 0000001E         
  181 0000001E         
  182 0000001E         ;*******************************************************
                       *************************************************
  183 0000001E         ;                                         CPU_CntLeadZer
                       os()
  184 0000001E         ;                                        COUNT LEADING Z
                       EROS
  185 0000001E         ;
  186 0000001E         ; Description : Counts the number of contiguous, most-si
                       gnificant, leading zero bits before the
  187 0000001E         ;                   first binary one bit in a data value
                       .
  188 0000001E         ;
  189 0000001E         ; Prototype   : CPU_DATA  CPU_CntLeadZeros(CPU_DATA  val
                       );
  190 0000001E         ;
  191 0000001E         ; Argument(s) : val         Data value to count leading 
                       zero bits.
  192 0000001E         ;
  193 0000001E         ; Return(s)   : Number of contiguous, most-significant, 
                       leading zero bits in 'val'.
  194 0000001E         ;
  195 0000001E         ; Note(s)     : (1) (a) Supports 32-bit data value size 
                       as configured by 'CPU_DATA' (see 'cpu.h
  196 0000001E         ;                       CPU WORD CONFIGURATION  Note #1'
                       ).
  197 0000001E         ;
  198 0000001E         ;                   (b) For 32-bit values :
  199 0000001E         ;
  200 0000001E         ;                             b31  b30  b29  ...  b04  b
                       03  b02  b01  b00    # Leading Zeros
  201 0000001E         ;                             ---  ---  ---       ---  -
                       --  ---  ---  ---    ---------------
  202 0000001E         ;                              1    x    x         x    
                       x    x    x    x            0
  203 0000001E         ;                              0    1    x         x    
                       x    x    x    x            1
  204 0000001E         ;                              0    0    1         x    
                       x    x    x    x            2
  205 0000001E         ;                              :    :    :         :    
                       :    :    :    :            :
  206 0000001E         ;                              :    :    :         :    
                       :    :    :    :            :
  207 0000001E         ;                              0    0    0         1    
                       x    x    x    x           27
  208 0000001E         ;                              0    0    0         0    
                       1    x    x    x           28
  209 0000001E         ;                              0    0    0         0    
                       0    1    x    x           29
  210 0000001E         ;                              0    0    0         0    
                       0    0    1    x           30
  211 0000001E         ;                              0    0    0         0    
                       0    0    0    1           31
  212 0000001E         ;                              0    0    0         0    



ARM Macro Assembler    Page 6 


                       0    0    0    0           32
  213 0000001E         ;
  214 0000001E         ;
  215 0000001E         ;               (2) MUST be defined in 'cpu_a.asm' (or '
                       cpu_c.c') if CPU_CFG_LEAD_ZEROS_ASM_PRESENT is
  216 0000001E         ;                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
                       
  217 0000001E         ;*******************************************************
                       *************************************************
  218 0000001E         
  219 0000001E         CPU_CntLeadZeros
  220 0000001E FAB0 F080       CLZ              R0, R0      ; Count leading zer
                                                            os
  221 00000022 4770            BX               LR
  222 00000024         
  223 00000024         
  224 00000024         ;*******************************************************
                       *************************************************
  225 00000024         ;                                         CPU_CntTrailZe
                       ros()
  226 00000024         ;                                        COUNT TRAILING 
                       ZEROS
  227 00000024         ;
  228 00000024         ; Description : Counts the number of contiguous, least-s
                       ignificant, trailing zero bits before the
  229 00000024         ;                   first binary one bit in a data value
                       .
  230 00000024         ;
  231 00000024         ; Prototype   : CPU_DATA  CPU_CntTrailZeros(CPU_DATA  va
                       l);
  232 00000024         ;
  233 00000024         ; Argument(s) : val         Data value to count trailing
                        zero bits.
  234 00000024         ;
  235 00000024         ; Return(s)   : Number of contiguous, least-significant,
                        trailing zero bits in 'val'.
  236 00000024         ;
  237 00000024         ; Note(s)     : (1) (a) Supports 32-bit data value size 
                       as configured by 'CPU_DATA' (see 'cpu.h
  238 00000024         ;                       CPU WORD CONFIGURATION  Note #1'
                       ).
  239 00000024         ;
  240 00000024         ;                   (b) For 32-bit values :
  241 00000024         ;
  242 00000024         ;                             b31  b30  b29  b28  b27  .
                       ..  b02  b01  b00    # Trailing Zeros
  243 00000024         ;                             ---  ---  ---  ---  ---   
                           ---  ---  ---    ----------------
  244 00000024         ;                              x    x    x    x    x    
                            x    x    1            0
  245 00000024         ;                              x    x    x    x    x    
                            x    1    0            1
  246 00000024         ;                              x    x    x    x    x    
                            1    0    0            2
  247 00000024         ;                              :    :    :    :    :    
                            :    :    :            :
  248 00000024         ;                              :    :    :    :    :    
                            :    :    :            :
  249 00000024         ;                              x    x    x    x    1    



ARM Macro Assembler    Page 7 


                            0    0    0           27
  250 00000024         ;                              x    x    x    1    0    
                            0    0    0           28
  251 00000024         ;                              x    x    1    0    0    
                            0    0    0           29
  252 00000024         ;                              x    1    0    0    0    
                            0    0    0           30
  253 00000024         ;                              1    0    0    0    0    
                            0    0    0           31
  254 00000024         ;                              0    0    0    0    0    
                            0    0    0           32
  255 00000024         ;
  256 00000024         ;
  257 00000024         ;               (2) MUST be defined in 'cpu_a.asm' (or '
                       cpu_c.c') if CPU_CFG_TRAIL_ZEROS_ASM_PRESENT is
  258 00000024         ;                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
                       
  259 00000024         ;*******************************************************
                       *************************************************
  260 00000024         
  261 00000024         CPU_CntTrailZeros
  262 00000024 FA90 F0A0       RBIT             R0, R0      ; Reverse bits
  263 00000028 FAB0 F080       CLZ              R0, R0      ; Count trailing ze
                                                            ros
  264 0000002C 4770            BX               LR
  265 0000002E         
  266 0000002E         
  267 0000002E         ;*******************************************************
                       *************************************************
  268 0000002E         ;                                            CPU_RevBits
                       ()
  269 0000002E         ;                                            REVERSE BIT
                       S
  270 0000002E         ;
  271 0000002E         ; Description : Reverses the bits in a data value.
  272 0000002E         ;
  273 0000002E         ; Prototypes  : CPU_DATA  CPU_RevBits(CPU_DATA  val);
  274 0000002E         ;
  275 0000002E         ; Argument(s) : val         Data value to reverse bits.
  276 0000002E         ;
  277 0000002E         ; Return(s)   : Value with all bits in 'val' reversed (s
                       ee Note #1).
  278 0000002E         ;
  279 0000002E         ; Note(s)     : (1) The final, reversed data value for '
                       val' is such that :
  280 0000002E         ;
  281 0000002E         ;                       'val's final bit  0       =  'va
                       l's original bit  N
  282 0000002E         ;                       'val's final bit  1       =  'va
                       l's original bit (N - 1)
  283 0000002E         ;                       'val's final bit  2       =  'va
                       l's original bit (N - 2)
  284 0000002E         ;
  285 0000002E         ;                               ...                     
                             ...
  286 0000002E         ;
  287 0000002E         ;                       'val's final bit (N - 2)  =  'va
                       l's original bit  2
  288 0000002E         ;                       'val's final bit (N - 1)  =  'va



ARM Macro Assembler    Page 8 


                       l's original bit  1
  289 0000002E         ;                       'val's final bit  N       =  'va
                       l's original bit  0
  290 0000002E         ;*******************************************************
                       *************************************************
  291 0000002E         
  292 0000002E         CPU_RevBits
  293 0000002E FA90 F0A0       RBIT             R0, R0      ; Reverse bits
  294 00000032 4770            BX               LR
  295 00000034         
  296 00000034         
  297 00000034         ;*******************************************************
                       *************************************************
  298 00000034         ;                                     CPU ASSEMBLY PORT 
                       FILE END
  299 00000034         ;*******************************************************
                       *************************************************
  300 00000034         
  301 00000034                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\output\cpu_a.d -o.\output\cpu_a.o -I..\..\..\Mid_Drivers\Micrium
\Software\uC-CPU\ARM-Cortex-M\ARMv7-M\ARM -I..\..\..\Mid_Drivers\Micrium\Softwa
re\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM -I.\RTE\_STM32F4 -IC:\Keil_v5\ARM\PA
CK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\
2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__UVISION_VERSION
 SETA 526" --predefine="_RTE_ SETA 1" --predefine="STM32F405xx SETA 1" --list=.
\listing\cpu_a.lst ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Cortex-M\AR
Mv7-M\ARM\cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 60 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
   Uses
      None
Comment: .text unused
CPU_CntLeadZeros 0000001E

Symbol: CPU_CntLeadZeros
   Definitions
      At line 219 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Cort
ex-M\ARMv7-M\ARM\cpu_a.asm
   Uses
      At line 51 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
Comment: CPU_CntLeadZeros used once
CPU_CntTrailZeros 00000024

Symbol: CPU_CntTrailZeros
   Definitions
      At line 261 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Cort
ex-M\ARMv7-M\ARM\cpu_a.asm
   Uses
      At line 52 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
Comment: CPU_CntTrailZeros used once
CPU_IntDis 00000000

Symbol: CPU_IntDis
   Definitions
      At line 74 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
   Uses
      At line 41 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
Comment: CPU_IntDis used once
CPU_IntEn 00000004

Symbol: CPU_IntEn
   Definitions
      At line 79 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
   Uses
      At line 42 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
Comment: CPU_IntEn used once
CPU_RevBits 0000002E

Symbol: CPU_RevBits
   Definitions
      At line 292 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Cort
ex-M\ARMv7-M\ARM\cpu_a.asm
   Uses
      At line 53 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
Comment: CPU_RevBits used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

CPU_SR_Restore 00000010

Symbol: CPU_SR_Restore
   Definitions
      At line 140 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Cort
ex-M\ARMv7-M\ARM\cpu_a.asm
   Uses
      At line 45 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
Comment: CPU_SR_Restore used once
CPU_SR_Save 00000008

Symbol: CPU_SR_Save
   Definitions
      At line 123 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Cort
ex-M\ARMv7-M\ARM\cpu_a.asm
   Uses
      At line 44 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
Comment: CPU_SR_Save used once
CPU_WaitForExcept 0000001A

Symbol: CPU_WaitForExcept
   Definitions
      At line 177 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Cort
ex-M\ARMv7-M\ARM\cpu_a.asm
   Uses
      At line 48 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
Comment: CPU_WaitForExcept used once
CPU_WaitForInt 00000016

Symbol: CPU_WaitForInt
   Definitions
      At line 162 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Cort
ex-M\ARMv7-M\ARM\cpu_a.asm
   Uses
      At line 47 in file ..\..\..\Mid_Drivers\Micrium\Software\uC-CPU\ARM-Corte
x-M\ARMv7-M\ARM\cpu_a.asm
Comment: CPU_WaitForInt used once
10 symbols
343 symbols in table
