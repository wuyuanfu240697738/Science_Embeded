


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                                uC/OS-I
                       II
    3 00000000         ;                                          The Real-Time
                        Kernel
    4 00000000         ;
    5 00000000         ;                         (c) Copyright 2009-2018; Silic
                       on Laboratories Inc.,
    6 00000000         ;                                400 W. Cesar Chavez, Au
                       stin, TX 78701
    7 00000000         ;
    8 00000000         ;                   All rights reserved. Protected by in
                       ternational copyright laws.
    9 00000000         ;
   10 00000000         ;                  Your use of this software is subject 
                       to your acceptance of the terms
   11 00000000         ;                  of a Silicon Labs Micrium software li
                       cense, which can be obtained by
   12 00000000         ;                  contacting info@micrium.com. If you d
                       o not agree to the terms of this
   13 00000000         ;                  license, you may not use this softwar
                       e.
   14 00000000         ;
   15 00000000         ;                  Please help us continue to provide th
                       e Embedded community with the finest
   16 00000000         ;                  software available. Your honesty is g
                       reatly appreciated.
   17 00000000         ;
   18 00000000         ;                    You can find our product's document
                       ation at: doc.micrium.com
   19 00000000         ;
   20 00000000         ;                          For more information visit us
                        at: www.micrium.com
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         ;                                             ARMv7-M Po
                       rt
   26 00000000         ;
   27 00000000         ; File      : os_cpu_a.asm
   28 00000000         ; Version   : V3.07.03
   29 00000000         ;*******************************************************
                       *************************************************
   30 00000000         ; For       : ARMv7-M Cortex-M
   31 00000000         ; Mode      : Thumb-2 ISA
   32 00000000         ; Toolchain : ARM C Compiler
   33 00000000         ;*******************************************************
                       *************************************************
   34 00000000         ; Note(s)   : (1) This port supports the ARM Cortex-M3, 
                       Cortex-M4 and Cortex-M7 architectures.
   35 00000000         ;             (2) It has been tested with the following 
                       Hardware Floating Point Unit.
   36 00000000         ;                 (a) Single-precision: FPv4-SP-D16-M an
                       d FPv5-SP-D16-M
   37 00000000         ;                 (b) Double-precision: FPv5-D16-M



ARM Macro Assembler    Page 2 


   38 00000000         ;*******************************************************
                       *************************************************
   39 00000000         ;
   40 00000000         
   41 00000000         ;*******************************************************
                       *************************************************
   42 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   43 00000000         ;*******************************************************
                       *************************************************
   44 00000000         
   45 00000000         ; External references.
   46 00000000                 IMPORT           OSPrioCur
   47 00000000                 IMPORT           OSPrioHighRdy
   48 00000000                 IMPORT           OSTCBCurPtr
   49 00000000                 IMPORT           OSTCBHighRdyPtr
   50 00000000                 IMPORT           OSIntExit
   51 00000000                 IMPORT           OSTaskSwHook
   52 00000000                 IMPORT           OS_CPU_ExceptStkBase
   53 00000000                 IMPORT           OS_KA_BASEPRI_Boundary ;IMPORT 
                                                            ÉùÃ÷±êºÅÀ´×ÔÍâ²¿ÎÄ¼
                                                            þ
   54 00000000         
   55 00000000         
   56 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   57 00000000                 EXPORT           OSCtxSw
   58 00000000                 EXPORT           OSIntCtxSw
   59 00000000                 EXPORT           PendSV_Handler
   60 00000000         
   61 00000000                 IF               {FPU} != "SoftVFP"
   64                          ENDIF
   65 00000000         
   66 00000000         
   67 00000000         ;*******************************************************
                       *************************************************
   68 00000000         ;                                               EQUATES
   69 00000000         ;*******************************************************
                       *************************************************
   70 00000000         
   71 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÖÐ¶Ï¿ØÖÆ¼Ä´æÆ÷   
                                                                               
                                                             ; Interrupt contro
                                                            l state register.
   72 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; ÏµÍ³ÓÅÏÈ¼¶¼Ä´æÆ÷ 
                                                                               
                                                               ; System priorit
                                                            y register (priorit
                                                            y 14).
   73 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSVÖÐ¶ÏºÍÏµÍ³½
                                                            ÚÅÄÖÐ¶Ï            
                                                                          ; Pen
                                                            dSV priority value 



ARM Macro Assembler    Page 3 


                                                            (lowest).
   74 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; ´¥·¢Èí¼þÖÐ¶ÏµÄÖµ 
                                                                               
                                                               ; Value to trigg
                                                            er PendSV exception
                                                            .
   75 00000000         
   76 00000000         
   77 00000000         ;    NVIC_INT_CTRL ÎªÖÐ¶Ï¿ØÖÆ¼Ä´æÆ÷£¬µØÖ·Îª0xE000ED04£¬
   78 00000000         ;    NVIC_SYSPRI4 ÎªPendSVÖÐ¶ÏÓÅÏÈ¼¶¼Ä´æÆ÷£¬µØÖ·Îª0xE000
                       ED22£¬
   79 00000000         ;    NVIC_PENDSV_PRIÎªPendSVºÍSystickµÄÖÐ¶ÏÓÅÏÈ¼¶£¬ÕâÀïÎ
                       ª0xFFFF£¬¶¼Îª×îµÍÓÅÏÈ¼¶£»
   80 00000000         ;    NVIC_PENDSVSET ¿ÉÒÔ´¥·¢Èí¼þÖÐ¶Ï£¬Í¨¹ý¸øÖÐ¶Ï¿ØÖÆ¼Ä´æ
                       Æ÷NVIC_INT_CTRL µÄbit28Î»Ð´1À´´¥·¢Èí¼þÖÐ¶Ï£¬Òò´ËNVIC_PEN
                       DSVSETÎª0x10000000¡£
   81 00000000         
   82 00000000         ;*******************************************************
                       *************************************************
   83 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   84 00000000         ;*******************************************************
                       *************************************************
   85 00000000         
   86 00000000                 PRESERVE8                    ;8×Ö½Ú¶ÔÆë
   87 00000000                 THUMB
   88 00000000         
   89 00000000                 AREA             CODE, CODE, READONLY
   90 00000000         
   91 00000000         
   92 00000000         ;*******************************************************
                       *************************************************
   93 00000000         ;                                   FLOATING POINT REGIS
                       TERS PUSH
   94 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       CPU_STK  *stkPtr)
   95 00000000         ;
   96 00000000         ; Note(s) : 1) This function saves S16-S31 registers of 
                       the Floating Point Unit.
   97 00000000         ;
   98 00000000         ;           2) Pseudo-code is:
   99 00000000         ;              a) Push remaining FPU regs S16-S31 on pro
                       cess stack;
  100 00000000         ;              b) Update OSTCBCurPtr->StkPtr;
  101 00000000         ;*******************************************************
                       *************************************************
  102 00000000         ;IF      :DEF:STM32F10X_MD
  103 00000000         ;    .....
  104 00000000         ;ELSE
  105 00000000         ;    ....... 
  106 00000000         ;ENDIF
  107 00000000         
  108 00000000                 IF               {FPU} != "SoftVFP"
  121                          ENDIF
  122 00000000         
  123 00000000         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 4 


  124 00000000         ;                                   FLOATING POINT REGIS
                       TERS POP
  125 00000000         ;                             void  OS_CPU_FP_Reg_Pop (C
                       PU_STK  *stkPtr)
  126 00000000         ;
  127 00000000         ; Note(s) : 1) This function restores S16-S31 of the Flo
                       ating Point Unit.
  128 00000000         ;
  129 00000000         ;           2) Pseudo-code is:
  130 00000000         ;              a) Restore regs S16-S31 of new process st
                       ack;
  131 00000000         ;              b) Update OSTCBHighRdyPtr->StkPtr pointer
                        of new proces stack;
  132 00000000         ;*******************************************************
                       *************************************************
  133 00000000         
  134 00000000                 IF               {FPU} != "SoftVFP"
  143                          ENDIF
  144 00000000         
  145 00000000         
  146 00000000         ;*******************************************************
                       *************************************************
  147 00000000         ;                                         START MULTITAS
                       KING
  148 00000000         ;                                      void OSStartHighR
                       dy(void)
  149 00000000         ;
  150 00000000         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  151 00000000         ;              the first task to start.
  152 00000000         ;
  153 00000000         ;           2) During task execution, PSP is used as the
                        stack pointer.
  154 00000000         ;              When an exception occurs, the core will s
                       witch to MSP until the exception return.
  155 00000000         ;
  156 00000000         ;           3) OSStartHighRdy() MUST:
  157 00000000         ;              a) Setup PendSV exception priority to low
                       est;
  158 00000000         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  159 00000000         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  160 00000000         ;              d) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  161 00000000         ;              e) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  162 00000000         ;              f) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->StkPtr;
  163 00000000         ;              g) Restore R0-R11 and R14 from new proces
                       s stack;
  164 00000000         ;              h) Enable interrupts (tasks will run with
                        interrupts enabled).
  165 00000000         ;*******************************************************
                       *************************************************
  166 00000000         
  167 00000000         OSStartHighRdy
  168 00000000 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 



ARM Macro Assembler    Page 5 


                                                            switch
  169 00000002 F64E 5022 
              F2CE 0000        MOV32            R0, NVIC_SYSPRI14 ; Set the Pen
                                                            dSV exception prior
                                                            ity
  170 0000000A F240 01FF 
              F2C0 0100        MOV32            R1, NVIC_PENDSV_PRI
  171 00000012 7001            STRB             R1, [R0]    ; ÉèÖÃPendSVµÄÓÅÏÈ¼
                                                            ¶
  172 00000014         
  173 00000014 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  174 00000016 F380 8809       MSR              PSP, R0     ;°Ñ0¼ÓÔØµ½R0,È»ºó°Ñ
                                                            R0µÄÖµ¼ÓÔØµ½ÌØÊâ¼Ä´
                                                            æÆ÷PSP
  175 0000001A         
  176 0000001A F240 0000 
              F2C0 0000        MOV32            R0, OS_CPU_ExceptStkBase ; Init
                                                            ialize the MSP to t
                                                            he OS_CPU_ExceptStk
                                                            Base
  177 00000022 6801            LDR              R1, [R0]
  178 00000024 F381 8808       MSR              MSP, R1     ;MSP = OS_CPU_Excep
                                                            tStkBase
  179 00000028         
  180 00000028 F7FF FFFE       BL               OSTaskSwHook ; Call OSTaskSwHoo
                                                            k() for FPU Push & 
                                                            Pop
  181 0000002C         
  182 0000002C F240 0000 
              F2C0 0000        MOV32            R0, OSPrioCur ; OSPrioCur   = O
                                                            SPrioHighRdy;
  183 00000034 F240 0100 
              F2C0 0100        MOV32            R1, OSPrioHighRdy
  184 0000003C 780A            LDRB             R2, [R1]
  185 0000003E 7002            STRB             R2, [R0]
  186 00000040         
  187 00000040 F240 0000 
              F2C0 0000        MOV32            R0, OSTCBCurPtr ; OSTCBCurPtr =
                                                             OSTCBHighRdyPtr;
  188 00000048 F240 0100 
              F2C0 0100        MOV32            R1, OSTCBHighRdyPtr
  189 00000050 680A            LDR              R2, [R1]
  190 00000052 6002            STR              R2, [R0]
  191 00000054         
  192 00000054 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  193 00000056 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  194 0000005A         
  195 0000005A F3EF 8014       MRS              R0, CONTROL
  196 0000005E F040 0002       ORR              R0, R0, #2
  197 00000062 F380 8814       MSR              CONTROL, R0
  198 00000066 F3BF 8F6F       ISB                          ; Sync instruction 
                                                            stream
  199 0000006A         
  200 0000006A E8BD 4FF0       LDMFD            SP!, {R4-R11, LR} ; Restore r4-



ARM Macro Assembler    Page 6 


                                                            11, lr from new pro
                                                            cess stack
  201 0000006E BC0F            LDMFD            SP!, {R0-R3} ; Restore r0, r3
  202 00000070 E8BD 5000       LDMFD            SP!, {R12, LR} 
                                                            ; Load R12 and LR
  203 00000074 BC06            LDMFD            SP!, {R1, R2} ; Load PC and dis
                                                            card xPSR
  204 00000076 B662            CPSIE            I           ;´ò¿ªÖÐ¶Ï
  205 00000078 4708            BX               R1
  206 0000007A         
  207 0000007A         
  208 0000007A         ;*******************************************************
                       *************************************************
  209 0000007A         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  210 0000007A         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  211 0000007A         ;
  212 0000007A         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  213 0000007A         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  214 0000007A         ;
  215 0000007A         ;           2) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  216 0000007A         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  217 0000007A         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  218 0000007A         ;*******************************************************
                       *************************************************
  219 0000007A         
  220 0000007A         OSCtxSw
  221 0000007A         OSIntCtxSw
  222 0000007A 481E            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  223 0000007C F04F 5180       LDR              R1, =NVIC_PENDSVSET
  224 00000080 6001            STR              R1, [R0]
  225 00000082 4770            BX               LR
  226 00000084         
  227 00000084         
  228 00000084         ;*******************************************************
                       *************************************************
  229 00000084         ;                                       HANDLE PendSV EX
                       CEPTION
  230 00000084         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  231 00000084         ;
  232 00000084         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  233 00000084         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M auto-saves half of the
  234 00000084         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  235 00000084         ;              saving of R4-R11 & R14 is required and fi
                       xing up the stack pointers. Using the PendSV exception
  236 00000084         ;              this way means that context saving and re



ARM Macro Assembler    Page 7 


                       storing is identical whether it is initiated from
  237 00000084         ;              a thread or occurs due to an interrupt or
                        exception.
  238 00000084         ;
  239 00000084         ;           2) Pseudo-code is:
  240 00000084         ;              a) Get the process SP
  241 00000084         ;              b) Save remaining regs r4-r11 & r14 on pr
                       ocess stack;
  242 00000084         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  243 00000084         ;              d) Call OSTaskSwHook();
  244 00000084         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  245 00000084         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  246 00000084         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  247 00000084         ;              h) Restore R4-R11 and R14 from new proces
                       s stack;
  248 00000084         ;              i) Perform exception return which will re
                       store remaining context.
  249 00000084         ;
  250 00000084         ;           3) On entry into PendSV handler:
  251 00000084         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  252 00000084         ;                 xPSR, PC, LR, R12, R0-R3
  253 00000084         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  254 00000084         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  255 00000084         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  256 00000084         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  257 00000084         ;
  258 00000084         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  259 00000084         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  260 00000084         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  261 00000084         ;
  262 00000084         ;           5) Increasing priority using a write to BASE
                       PRI does not take effect immediately.
  263 00000084         ;              (a) IMPLICATION  This erratum means that 
                       the instruction after an MSR to boost BASEPRI
  264 00000084         ;                  might incorrectly be preempted by an 
                       insufficient high priority exception.
  265 00000084         ;
  266 00000084         ;              (b) WORKAROUND  The MSR to boost BASEPRI 
                       can be replaced by the following code sequence:
  267 00000084         ;
  268 00000084         ;                  CPSID i
  269 00000084         ;                  MSR to BASEPRI
  270 00000084         ;                  DSB
  271 00000084         ;                  ISB
  272 00000084         ;                  CPSIE i
  273 00000084         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 8 


  274 00000084         
  275 00000084         PendSV_Handler
  276 00000084 B672            CPSID            I           ;¹Ø±ÕÖÐ¶Ï          
                                                                               
                                                                      ; Cortex-
                                                            M7 errata notice. S
                                                            ee Note #5
  277 00000086         
  278 00000086         ;½öm7
  279 00000086 F240 0200 
              F2C0 0200        MOV32            R2, OS_KA_BASEPRI_Boundary ; Se
                                                            t BASEPRI priority 
                                                            level required for 
                                                            exception preemptio
                                                            n
  280 0000008E 6811            LDR              R1, [R2]
  281 00000090 F381 8811       MSR              BASEPRI, R1
  282 00000094 F3BF 8F4F       DSB
  283 00000098 F3BF 8F6F       ISB
  284 0000009C B662            CPSIE            I
  285 0000009E         ;
  286 0000009E         
  287 0000009E F3EF 8009       MRS              R0, PSP     ;R0 = PSP          
                                                                               
                                                              ; PSP is process 
                                                            stack pointer
  288 000000A2 E920 4FF0       STMFD            R0!, {R4-R11, R14} ; Save remai
                                                            ning regs r4-11, R1
                                                            4 on process stack
  289 000000A6         
  290 000000A6 F240 0500 
              F2C0 0500        MOV32            R5, OSTCBCurPtr ; OSTCBCurPtr->
                                                            StkPtr = SP;
  291 000000AE 6829            LDR              R1, [R5]
  292 000000B0 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  293 000000B2         
  294 000000B2         ; At this point, entire context of process has been save
                       d
  295 000000B2 4674            MOV              R4, LR      ; Save LR exc_retur
                                                            n value
  296 000000B4 F7FF FFFE       BL               OSTaskSwHook ; Call OSTaskSwHoo
                                                            k() for FPU Push & 
                                                            Pop
  297 000000B8         
  298 000000B8 F240 0000 
              F2C0 0000        MOV32            R0, OSPrioCur ; OSPrioCur   = O
                                                            SPrioHighRdy;
  299 000000C0 F240 0100 
              F2C0 0100        MOV32            R1, OSPrioHighRdy
  300 000000C8 780A            LDRB             R2, [R1]
  301 000000CA 7002            STRB             R2, [R0]
  302 000000CC         
  303 000000CC F240 0100 
              F2C0 0100        MOV32            R1, OSTCBHighRdyPtr ; OSTCBCurP
                                                            tr = OSTCBHighRdyPt
                                                            r;
  304 000000D4 680A            LDR              R2, [R1]



ARM Macro Assembler    Page 9 


  305 000000D6 602A            STR              R2, [R5]
  306 000000D8         
  307 000000D8 F044 0E04       ORR              LR,  R4, #0x04 ; Ensure excepti
                                                            on return uses proc
                                                            ess stack
  308 000000DC 6810            LDR              R0,  [R2]   ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  309 000000DE E8B0 4FF0       LDMFD            R0!, {R4-R11, R14} ; Restore r4
                                                            -11, R14 from new p
                                                            rocess stack
  310 000000E2 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  311 000000E6         
  312 000000E6         ;½öm7
  313 000000E6 F240 0200 
              F2C0 0200        MOV32            R2, #0      ; Restore BASEPRI p
                                                            riority level to 0
  314 000000EE F382 8811       MSR              BASEPRI, R2
  315 000000F2         ;
  316 000000F2         
  317 000000F2         ;½öm4
  318 000000F2         ;CPSIE   I
  319 000000F2         ;m4
  320 000000F2         
  321 000000F2 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  322 000000F4         
  323 000000F4                 ALIGN                        ; Removes warning[A
                                                            1581W]: added <no_p
                                                            adbytes> of padding
                                                             at <address>
  324 000000F4                 END
              E000ED04 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\output\os_cpu_a.d -o.\output\os_cpu_a.o -I..\..\..\Mid_Drivers\M
icrium\Software\uC-CPU\ARM-Cortex-M\ARMv7-M\ARM -I..\..\..\Mid_Drivers\Micrium\
Software\uCOS-III\Ports\ARM-Cortex-M\ARMv7-M\ARM -I.\RTE\_STM32F4 -IC:\Keil_v5\
ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4x
x_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__UVISION_V
ERSION SETA 526" --predefine="_RTE_ SETA 1" --predefine="STM32F405xx SETA 1" --
list=.\listing\os_cpu_a.lst ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Port
s\ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 89 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      None
Comment: CODE unused
OSCtxSw 0000007A

Symbol: OSCtxSw
   Definitions
      At line 220 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 57 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000007A

Symbol: OSIntCtxSw
   Definitions
      At line 221 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 58 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHighRdy 00000000

Symbol: OSStartHighRdy
   Definitions
      At line 167 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 56 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
Comment: OSStartHighRdy used once
PendSV_Handler 00000084

Symbol: PendSV_Handler
   Definitions
      At line 275 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 59 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
Comment: PendSV_Handler used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 71 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 222 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
Comment: NVIC_INT_CTRL used once
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 74 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 223 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
Comment: NVIC_PENDSVSET used once
NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 73 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 170 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 72 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 169 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 50 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 46 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 182 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
      At line 298 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm

OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 47 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 183 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
      At line 299 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm

OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 48 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 187 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
      At line 290 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 49 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 188 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
      At line 303 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm

OSTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTaskSwHook
   Definitions
      At line 51 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 180 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
      At line 296 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm

OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 52 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 176 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
OS_KA_BASEPRI_Boundary 00000000

Symbol: OS_KA_BASEPRI_Boundary
   Definitions
      At line 53 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\A
RM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
   Uses
      At line 279 in file ..\..\..\Mid_Drivers\Micrium\Software\uCOS-III\Ports\
ARM-Cortex-M\ARMv7-M\ARM\os_cpu_a.asm
Comment: OS_KA_BASEPRI_Boundary used once
8 symbols
352 symbols in table
