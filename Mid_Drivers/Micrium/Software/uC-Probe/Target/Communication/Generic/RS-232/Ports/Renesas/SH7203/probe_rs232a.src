;********************************************************************************************************
;                                                uC/OS-II
;                                          The Real-Time Kernel
;
;                         (c) Copyright 1992-1998, Jean J. Labrosse, Plantation, FL
;                                           All Rights Reserved
;
;
;                                            Renesas SH-2A (Non-FPU)
;                                Renesas C/C++ Compiler Toolchain V.9.00.03.006
;
;                                         
;
; File : OS_CPU_A.SRC
; By   : Ian Hall
;********************************************************************************************************

        .EXPORT _ProbeRS232RxISR
        .EXPORT _ProbeRS232TxISR
        .EXPORT _ProbeRS232EriISR
        .EXPORT _ProbeRS232BriISR
        .IMPORT _OSIntNesting
        .IMPORT _OSTCBCur
        .IMPORT _OSIntExit
        .IMPORT _ProbeRS232_RxISRHandler
        .IMPORT _ProbeRS232_TxISRHandler
        .IMPORT _ProbeRS232_BriISRHandler
        .IMPORT _ProbeRS232_EriISRHandler


                
        
        .SECTION    P,CODE,ALIGN=4

_ProbeRS232TxISR:
        mov.l       R0, @-R15
        STC         SR,R0
        OR          #240,R0
        LDC         R0,SR
        mov.l       @r15+, R0


; Save processor registers on the stack
        
        sts.l    macl, @-r15
        sts.l    mach, @-r15
        stc.l    gbr, @-r15
        movml.l  r15, @-r15                     ; push registers PR, R14, R13 ... R0
        sts.l    fpul, @-r15
        sts.l    fpscr, @-r15
        fmov.s   fr15 ,@-r15
        fmov.s   fr14 ,@-r15
        fmov.s   fr13 ,@-r15
        fmov.s   fr12 ,@-r15
        fmov.s   fr11 ,@-r15
        fmov.s   fr10 ,@-r15
        fmov.s   fr9 ,@-r15
        fmov.s   fr8 ,@-r15
        fmov.s   fr7 ,@-r15
        fmov.s   fr6 ,@-r15
        fmov.s   fr5 ,@-r15
        fmov.s   fr4 ,@-r15
        fmov.s   fr3 ,@-r15
        fmov.s   fr2 ,@-r15
        fmov.s   fr1 ,@-r15
        fmov.s   fr0 ,@-r15

        mov.l    #_OSIntNesting, r1             ; Increment OSIntNesting
        mov.b   @r1, r0
        extu.b   r0, r0
        add      #1, r0
        mov.b    r0, @r1                        ; If OSIntNesting == 1 save the current stack pointer
        tst      #1, r0                         ; onto the current task's stack
        bt       _ProbeRS232TxISR1
        
        mov.l    #_OSTCBCur, r1                 ; Save current task's SP into its TCB
        mov.l   @r1, r0
        mov      r15, @r0

_ProbeRS232TxISR1:
        mov.l    #_ProbeRS232_TxISRHandler, r0
        jsr     @r0                     
        nop
        
        mov.l    #_OSIntExit, r0
        jsr     @r0                             ; call OSIntExit()
        nop

; restore all processor registers from new task's stack

        fmov.s  @r15+, fr0
        fmov.s  @r15+, fr1
        fmov.s  @r15+, fr2
        fmov.s  @r15+, fr3
        fmov.s  @r15+, fr4
        fmov.s  @r15+, fr5
        fmov.s  @r15+, fr6
        fmov.s  @r15+, fr7
        fmov.s  @r15+, fr8
        fmov.s  @r15+, fr9
        fmov.s  @r15+, fr10
        fmov.s  @r15+, fr11
        fmov.s  @r15+, fr12
        fmov.s  @r15+, fr13
        fmov.s  @r15+, fr14
        fmov.s  @r15+, fr15
        lds.l   @r15+, fpscr
        lds.l   @r15+, fpul
        movml.l @r15+, r15                      ; restores R0, R1 ... R14, PR
        ldc.l   @r15+, gbr
        lds.l   @r15+, mach
        lds.l   @r15+, macl

        rte                                     ; return from interrupt
        nop
        
_ProbeRS232RxISR:
        mov.l       R0, @-R15
        STC         SR,R0
        OR          #240,R0
        LDC         R0,SR
        mov.l       @r15+, R0


; Save processor registers on the stack
        
        sts.l    macl, @-r15
        sts.l    mach, @-r15
        stc.l    gbr, @-r15
        movml.l  r15, @-r15                     ; push registers PR, R14, R13 ... R0
        sts.l    fpul, @-r15
        sts.l    fpscr, @-r15
        fmov.s   fr15 ,@-r15
        fmov.s   fr14 ,@-r15
        fmov.s   fr13 ,@-r15
        fmov.s   fr12 ,@-r15
        fmov.s   fr11 ,@-r15
        fmov.s   fr10 ,@-r15
        fmov.s   fr9 ,@-r15
        fmov.s   fr8 ,@-r15
        fmov.s   fr7 ,@-r15
        fmov.s   fr6 ,@-r15
        fmov.s   fr5 ,@-r15
        fmov.s   fr4 ,@-r15
        fmov.s   fr3 ,@-r15
        fmov.s   fr2 ,@-r15
        fmov.s   fr1 ,@-r15
        fmov.s   fr0 ,@-r15

        mov.l    #_OSIntNesting, r1             ; Increment OSIntNesting
        mov.b   @r1, r0
        extu.b   r0, r0
        add      #1, r0
        mov.b    r0, @r1                        ; If OSIntNesting == 1 save the current stack pointer
        tst      #1, r0                         ; onto the current task's stack
        bt       _ProbeRS232RxISR1
        
        mov.l    #_OSTCBCur, r1                 ; Save current task's SP into its TCB
        mov.l   @r1, r0
        mov      r15, @r0

_ProbeRS232RxISR1:
        mov.l    #_ProbeRS232_RxISRHandler, r0
        jsr     @r0                     
        nop
        
        mov.l    #_OSIntExit, r0
        jsr     @r0                             ; call OSIntExit()
        nop

; restore all processor registers from new task's stack

        fmov.s  @r15+, fr0
        fmov.s  @r15+, fr1
        fmov.s  @r15+, fr2
        fmov.s  @r15+, fr3
        fmov.s  @r15+, fr4
        fmov.s  @r15+, fr5
        fmov.s  @r15+, fr6
        fmov.s  @r15+, fr7
        fmov.s  @r15+, fr8
        fmov.s  @r15+, fr9
        fmov.s  @r15+, fr10
        fmov.s  @r15+, fr11
        fmov.s  @r15+, fr12
        fmov.s  @r15+, fr13
        fmov.s  @r15+, fr14
        fmov.s  @r15+, fr15
        lds.l   @r15+, fpscr
        lds.l   @r15+, fpul
        movml.l @r15+, r15                      ; restores R0, R1 ... R14, PR
        ldc.l   @r15+, gbr
        lds.l   @r15+, mach
        lds.l   @r15+, macl

        rte                                     ; return from interrupt
        nop 

_ProbeRS232BriISR:
        mov.l       R0, @-R15
        STC         SR,R0
        OR          #240,R0
        LDC         R0,SR
        mov.l       @r15+, R0


; Save processor registers on the stack
         
        sts.l    macl, @-r15
        sts.l    mach, @-r15
        stc.l    gbr, @-r15
        movml.l  r15, @-r15                     ; push registers PR, R14, R13 ... R0
        sts.l    fpul, @-r15
        sts.l    fpscr, @-r15
        fmov.s   fr15 ,@-r15
        fmov.s   fr14 ,@-r15
        fmov.s   fr13 ,@-r15
        fmov.s   fr12 ,@-r15
        fmov.s   fr11 ,@-r15
        fmov.s   fr10 ,@-r15
        fmov.s   fr9 ,@-r15
        fmov.s   fr8 ,@-r15
        fmov.s   fr7 ,@-r15
        fmov.s   fr6 ,@-r15
        fmov.s   fr5 ,@-r15
        fmov.s   fr4 ,@-r15
        fmov.s   fr3 ,@-r15
        fmov.s   fr2 ,@-r15
        fmov.s   fr1 ,@-r15
        fmov.s   fr0 ,@-r15

        mov.l    #_OSIntNesting, r1             ; Increment OSIntNesting
        mov.b   @r1, r0
        extu.b   r0, r0
        add      #1, r0
        mov.b    r0, @r1                        ; If OSIntNesting == 1 save the current stack pointer
        tst      #1, r0                         ; onto the current task's stack
        bt       _ProbeRS232BriISR1
        
        mov.l    #_OSTCBCur, r1                 ; Save current task's SP into its TCB
        mov.l   @r1, r0
        mov      r15, @r0

_ProbeRS232BriISR1:
        mov.l    #_ProbeRS232_BriISRHandler, r0
        jsr     @r0                     
        nop
        
        mov.l    #_OSIntExit, r0
        jsr     @r0                             ; call OSIntExit()
        nop

; restore all processor registers from new task's stack

        fmov.s  @r15+, fr0
        fmov.s  @r15+, fr1
        fmov.s  @r15+, fr2
        fmov.s  @r15+, fr3
        fmov.s  @r15+, fr4
        fmov.s  @r15+, fr5
        fmov.s  @r15+, fr6
        fmov.s  @r15+, fr7
        fmov.s  @r15+, fr8
        fmov.s  @r15+, fr9
        fmov.s  @r15+, fr10
        fmov.s  @r15+, fr11
        fmov.s  @r15+, fr12
        fmov.s  @r15+, fr13
        fmov.s  @r15+, fr14
        fmov.s  @r15+, fr15
        lds.l   @r15+, fpscr
        lds.l   @r15+, fpul
        movml.l @r15+, r15                      ; restores R0, R1 ... R14, PR
        ldc.l   @r15+, gbr
        lds.l   @r15+, mach
        lds.l   @r15+, macl

        rte                                     ; return from interrupt
        nop

_ProbeRS232EriISR:
        mov.l       R0, @-R15
        STC         SR,R0
        OR          #240,R0
        LDC         R0,SR
        mov.l       @r15+, R0


; Save processor registers on the stack
        
        sts.l    macl, @-r15
        sts.l    mach, @-r15
        stc.l    gbr, @-r15
        movml.l  r15, @-r15                     ; push registers PR, R14, R13 ... R0
        sts.l    fpul, @-r15
        sts.l    fpscr, @-r15
        fmov.s   fr15 ,@-r15
        fmov.s   fr14 ,@-r15
        fmov.s   fr13 ,@-r15
        fmov.s   fr12 ,@-r15
        fmov.s   fr11 ,@-r15
        fmov.s   fr10 ,@-r15
        fmov.s   fr9 ,@-r15
        fmov.s   fr8 ,@-r15
        fmov.s   fr7 ,@-r15
        fmov.s   fr6 ,@-r15
        fmov.s   fr5 ,@-r15
        fmov.s   fr4 ,@-r15
        fmov.s   fr3 ,@-r15
        fmov.s   fr2 ,@-r15
        fmov.s   fr1 ,@-r15
        fmov.s   fr0 ,@-r15

        mov.l    #_OSIntNesting, r1             ; Increment OSIntNesting
        mov.b   @r1, r0
        extu.b   r0, r0
        add      #1, r0
        mov.b    r0, @r1                        ; If OSIntNesting == 1 save the current stack pointer
        tst      #1, r0                         ; onto the current task's stack
        bt       _ProbeRS232EriISR1
        
        mov.l    #_OSTCBCur, r1                 ; Save current task's SP into its TCB
        mov.l   @r1, r0
        mov      r15, @r0

_ProbeRS232EriISR1:
        mov.l    #_ProbeRS232_EriISRHandler, r0
        jsr     @r0                     
        nop
        
        mov.l    #_OSIntExit, r0
        jsr     @r0                             ; call OSIntExit()
        nop

; restore all processor registers from new task's stack

        fmov.s  @r15+, fr0
        fmov.s  @r15+, fr1
        fmov.s  @r15+, fr2
        fmov.s  @r15+, fr3
        fmov.s  @r15+, fr4
        fmov.s  @r15+, fr5
        fmov.s  @r15+, fr6
        fmov.s  @r15+, fr7
        fmov.s  @r15+, fr8
        fmov.s  @r15+, fr9
        fmov.s  @r15+, fr10
        fmov.s  @r15+, fr11
        fmov.s  @r15+, fr12
        fmov.s  @r15+, fr13
        fmov.s  @r15+, fr14
        fmov.s  @r15+, fr15
        lds.l   @r15+, fpscr
        lds.l   @r15+, fpul
        movml.l @r15+, r15                      ; restores R0, R1 ... R14, PR
        ldc.l   @r15+, gbr
        lds.l   @r15+, mach
        lds.l   @r15+, macl

        rte                                     ; return from interrupt
        nop
       
        .END
